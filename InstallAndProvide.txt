1. npm install @mantine/core @mantine/hooks
2. npm install --save-dev postcss postcss-preset-mantine postcss-simple-vars


3. Create postcss.config.cjs file at the root of your application with the following content:
module.exports = {
  plugins: {
    'postcss-preset-mantine': {},
    'postcss-simple-vars': {
      variables: {
        'mantine-breakpoint-xs': '36em',
        'mantine-breakpoint-sm': '48em',
        'mantine-breakpoint-md': '62em',
        'mantine-breakpoint-lg': '75em',
        'mantine-breakpoint-xl': '88em',
      },
    },
  },
};


4. Add styles imports to the root of your application. Usually styles are imported once in the root file. For example, if you are using Next.js with pages router, you can import styles in _app.tsx file: 

// core styles are required for all packages

@import "@mantine/core/styles.css";  ***** ata importent  . ata import korte hobe



5. Wrap your application with MantineProvider:

import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import "./index.css";
import { RouterProvider } from "react-router-dom";
import { router } from "./components/routers";
import { ThemeProvider } from "./components/theme/theme-provider";
import { theme } from "./components/theme/Mainten.Theme";
import { MantineProvider } from "@mantine/core";

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <MantineProvider theme={theme}> //এটাকে রুট লেভেলে প্রোভাইড করতে হবে  / This needs to be provided at the root level.
      <ThemeProvider defaultTheme="dark" storageKey="vite-ui-theme">
        <RouterProvider router={router} />,
      </ThemeProvider>
    </MantineProvider> 
  </StrictMode>
);



















/1. import { createTheme } from "@mantine/core";

export const theme = createTheme({
  /** Put your mantine theme override here */
});


2. 